[{"id":0,"href":"/4.-Semester/04-docker/","title":"04 Docker","section":"4. Semester","content":"\nWhat is Docker\r#\rDocker is an open platform for developing, shipping, and running applications.\nDocker is free software developed by Docker Inc. It was presented to the general public on March 13, 2013, and has become since that day a must in the world of IT development.\nDocker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications.\nBy taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.\nwww.docker.com\nDocker Desktop\r#\rDocker Desktop is an easy-to-install application for your Mac or Windows environment that enables you to build and share containerized applications and microservice.\nDocker Desktop includes the Docker daemon (dockerd), the Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes, and Credential Helper.\nThe Docker Desktop application makes it easy for you to work with Docker. There are versions of Docker Desktop for; macOS, Windows and Linux\nDownload and Install\r#\rYou can download the version you need her: www.docker.com/products/docker-desktop\nInstall Docker Desktop on Windows Install Docker Desktop on Mac Verify Docker\r#\rYou can verify that Docker are working byt thise Docker command:\ndocker run hello-world\rDocker demo\r#\rThe GitHub Repository - https://github.com/TueHellsternKea/docker-demo.git - contains different guides on Docker.\nCreate Docker Hub account\r#\rDocker Hub is a hosted repository service provided by Docker for finding and sharing container images.\nCreate an account on Docker Hub.\nWhen you have created the account you can upload your own Docker images and you have access to a lot of different Docker images.\nIs Docker a virtual machine?\r#\rIt is one of the most asked questions about Docker. The answer is: actually, not quite\nIt may look like a virtual machine at first, but the functionality is not the same.\nUnlike Docker, a virtual machine will include a complete operating system. It will work independently and act like a computer. Docker will only share the resources of the host machine to run its environments.\nDocker architecture\r#\rDocker uses a client-server architecture.\nThe Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers.\nThe Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.\nAnother Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.\nThe Docker daemon\r#\rThe Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.\nThe Docker client\r#\rThe Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon.\nDocker registries\r#\rA Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry.\nWhen you use the docker pull or docker run commands, the required images are pulled from your configured registry. When you use the docker push command, your image is pushed to your configured registry.\nDocker objects\r#\rWhen you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. This section is a brief overview of some of those objects.\nImages\r#\rAn image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization.\nFor example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.\nYou might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it.\nEach instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt.\nThis is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.\nContainers\r#\rA container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI.\nYou can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.\nBy default, a container is relatively well isolated from other containers and its host machine. You can control how isolated a container’s network, storage, or other underlying subsystems are from other containers or from the host machine.\nA container is defined by its image as well as any configuration options you provide to it when you create or start it. When a container is removed, any changes to its state that are not stored in persistent storage disappear.\nUseful commands for Docker\r#\rThis is a list of commands that may be useful to you on Docker\nList your images\r#\rdocker image ls\rDelete a specific image.\r#\rdocker image rm [image name]\rDelete all existing images.\r#\rdocker image rm $(docker images -a -q)\rList all existing containers (running and not running).\r#\rdocker ps -a\rChange a container name at running time.\r#\rdocker run --name [container name] [image name]\rStop a specific container.\r#\rdocker stop [container name]\rStop all running containers.\r#\rdocker stop $(docker ps -a -q)\rDelete a specific container (only if stopped).\r#\rdocker rm [container name]\rDelete all containers (only if stopped).\r#\rdocker rm $(docker ps -a -q)\rDisplay logs of a container.\r#\rdocker logs [container name]\rLinks\r#\rwww.docker.com docs.docker.com/get-started/overview Microsoft - What is Docker Migrate custom software to Azure App Service using a custom container "},{"id":1,"href":"/4.-Semester/","title":"4. Semester","section":"","content":"\rModule 4.2\r#\rSlides Introduktion\r#\rhtml pdf Kode eksempler\r#\rMine kode eksempler ligger på GitHub: github.com/TueHellsternKea/4_sem_code\nTeaching Sessions\r#\rPython brushup, MySQL, Dash and Azure 04-10-2022 - Tirsdag Virtualisering (Azure) 07-10-2022 - Fredag Python, Web Service API 13-10-2022 - Torsdag Docker 24-10-2022 - Mandag Distribuerede systemer 01-10-2022 - Tirsdag Power BI - 1 04-10-2022 - Fredag Machine Learning 1 08-10-2022 - Tirsdag Machine Learning 2 11-10-2022 - Fredag Power BI - 2 14-10-2022 - Mandag Programming 22-10-2022 - Tirsdag AI - (Deep Learning) 25-10-2022 - Fredag IT architecture \u0026amp; Microservice 29-10-2022 - Tirsdag IT security 09-12-2022 - Fredag Delivery 1 - ?? "},{"id":2,"href":"/5.-Semester/","title":"5. Semester","section":"","content":"\rValgfag - 5. Semester\r#\r"},{"id":3,"href":"/5.-Semester/Know-Your-Data/","title":"Know Your Data","section":"5. Semester","content":"\rKnow Your Data\r#\rSessions\r#\rIntroduction 24-08-2022 - Wednesday (TUHE, JAIA and Hans Keiding) Slide ETL Slide 31-08-2022 - Wednesday (TUHE) 07-09-2022 - Wednesday (TUHE) 13-09-2022 - Tuesday (TUHE) Together with \u0026ldquo;Working as a Business Analyst\u0026rdquo; 21-09-2022 - Wednesday (Together with WaaBA) ETL 28-09-2022 - Wednesday (TUHE) Delivery 1 03-10-2022 - Monday Economics 06-10-2022 - Thursday (*TUHE, JAIA) 14-10-2022 - Friday (JAIA) Machine Learning 26-10-2022 - Wednesday (TUHE, JAIA and SimCorp) 11-11-2022 - Friday (JAIA) 18-11-2022 - Friday (TUEH) Dashboard 23-11-2022 - Wednesday (TUHE, JAIA and Henrik O. Larsen SamPension) Together with \u0026ldquo;Working as a Business Analyst\u0026rdquo; 30-11-2022 - Wednesday (Together with WaaBA) Dashboard 02-12-2022 - Friday (TUEH) 05-12-2022 - Monday (TUHE \u0026amp; JAIA) 07-12-2022 - Wednesday (TUHE \u0026amp; JAIA) Delivery 2 09-12-2022 - Friday Multiple choice 09-01-2023 - Monday Delivery\u0026rsquo;s\r#\rDate Delivery Pct. 03-10-2022 Delivery 1 40% 09-12-2022 Delivery 2 40% 09-01-2023 Multiple choice 20% "},{"id":4,"href":"/5.-Semester/Know-Your-Data/etl/","title":"Etl","section":"Know Your Data","content":"\rKnow Your Data\r#\rSessions\r#\rIntroduction 24-08-2022 - Wednesday (TUHE, JAIA and Hans Keiding) Slide ETL Slide 31-08-2022 - Wednesday (TUHE) 07-09-2022 - Wednesday (TUHE) 13-09-2022 - Tuesday (TUHE) Together with \u0026ldquo;Working as a Business Analyst\u0026rdquo; 21-09-2022 - Wednesday (Together with WaaBA) ETL 28-09-2022 - Wednesday (TUHE) Delivery 1 03-10-2022 - Monday Economics 06-10-2022 - Thursday (*TUHE, JAIA) 14-10-2022 - Friday (JAIA) Machine Learning 26-10-2022 - Wednesday (TUHE, JAIA and SimCorp) 11-11-2022 - Friday (JAIA) 18-11-2022 - Friday (TUEH) Dashboard 23-11-2022 - Wednesday (TUHE, JAIA and Henrik O. Larsen SamPension) Together with \u0026ldquo;Working as a Business Analyst\u0026rdquo; 30-11-2022 - Wednesday (Together with WaaBA) Dashboard 02-12-2022 - Friday (TUEH) 05-12-2022 - Monday (TUHE \u0026amp; JAIA) 07-12-2022 - Wednesday (TUHE \u0026amp; JAIA) Delivery 2 09-12-2022 - Friday Multiple choice 09-01-2023 - Monday Delivery\u0026rsquo;s\r#\rDate Delivery Pct. 03-10-2022 Delivery 1 40% 09-12-2022 Delivery 2 40% 09-01-2023 Multiple choice 20% "},{"id":5,"href":"/4.-Semester/04-docker/dockerdemo/","title":"Dockerdemo","section":"04 Docker","content":"\rCreate your fist Docker application\r#\rThe purpose of this Docker application is to create a Python program that print/displays a sentence.\nThe Python program will have to be launched through Dockerfile.\nNote: You must have install Docker on your computer\nCreate the application\r#\rYou have to create a folder on your computer - minfirstdockerapp\nIt must contain the following two files:\nmain.py - Python file containing the code to be executed Dockerfile - Docker file that will contain the necessary instructions to create the environment main.py\r#\rThe main.py file is very simpel for this demo\nprint(\u0026#34;Welcome to your first Docker app\u0026#34;) Dockerfile\r#\rThe purpose of this Docker file is to run your Python code.\nTo do this, your Docker must contain all the dependencies necessary to launch Python. A Linux (Ubuntu) with Python installed on it should do the trick.\nFirst step in creating the Dockerfile is to access the DockerHub website - hub.docker.com\nThe DockerHub website contains many pre-designed images you can use. For this case, type Python in the search bar.\nThe first result is the official image to execute Python.\nYou must create a Dockerfile and add this commands:\n# Importing the base image. FROM python:latest # To launch your python code, you must import it into our image. # Use the keyword \u0026#39;COPY\u0026#39; to do that. # The first parameter \u0026#39;main.py\u0026#39; is the name of the file on the host. # The second parameter \u0026#39;/\u0026#39; is the path where to put the file on the image. COPY main.py / # You need to define the command to launch when you run the image. # Use the keyword \u0026#39;CMD\u0026#39; to do that. CMD [ \u0026#34;python\u0026#34;, \u0026#34;./main.py\u0026#34; ] Remember that the Dockerfile doesn\u0026rsquo;t have a file extension\nRun the application\r#\rThe launce of your application are done in 2 parts\nBuild\r#\rdocker build -t python-demo . Launch\r#\rdocker run python-demo\rUsing Pandas, Python and Docker\r#\rUsing a Docker container to run a Python application using Pandas library to import the customers.csv file.\nYou are going to use:\nDocker Python Pandas In the development of a applications you need a consistent environment across all your devices. It can be time consuming to install all the dependencies from scratch whenever you try to run your code on a new device or in a new environment.\nDocker is here to solve exactly this problem.\nDocker provides a way to package everything you need to run your applications in a Container which you can download or pull into all the devices you use and just start working right away.\nFiles\r#\rThe files for this demo i located in the folder docker-demo\ncustomers.csv demo1_app.py Dockerfile Steps\r#\rThere are 3 steps in this demo:\nInstalling Python and Pandas onto our system and making the Python application Creating a Docker Image file which will be used to make a Container Testing the container Installing Python and Pandas onto our system and making the Python application\r#\rInstall Python, if its NOT on on your system Install Pandas, if its NOT on on your system pip3 install pandas Create a project directory docker_demo_pandas Copy the file customers.csv to this directory In this folder, make a new python file - demo_pandas_app.py Write this code in the demo_pandas_app.py file import pandas as pd\rdf = pd.read_csv(\u0026#39;customers.csv\u0026#39;)\rprint(df.head(10)) Run the Python file to make sure that everything is working Creating a Docker Image file which will be used to make a Container\r#\rInstall Docker, if its NOT on your system, by going to there website and following the installation steps - https://docs.docker.com/engine/install/ Make a new file in your docker_demo_pandas directory and name it Dockerfile. Be sure not give it an extension. Write this code in - Dockerfile: # syntax=docker/dockerfile:1\rFROM python:3.8-slim-buster\rRUN /usr/local/bin/python -m pip install --upgrade pip\rRUN pip install pandas\rCOPY . .\rCMD [ \u0026#34;python\u0026#34;, \u0026#34;demo_pandas_app.py\u0026#34;] First line tells the docker engine on how to read/parse the lines coming after it. This line always has to be the first line before any spaces or characters Second line downloads a base python image from Dockerhub. It is an environment that already has python installed on it Third line upgrades the Pip as the above image is running an old version of it Fourth line installs Pandas library in the image. This is a crucial step that we will also use to test our Docker image next Fifth line copies all the files in the current directory and stores them onto the file system attached with the docker image Sixth line tells Docker image on what to do when the Run command is given Open to your commandpromt and make a docker image by typing: docker build --tag docker-demo1 . Make sure that Docker demon is running\nTesting the container\r#\rRun the docker image by typing, in your commandpromt: docker run docker_demo_pandas Now you will see the Pandas dataframe on the screen.\nRember - If you make any changes you have to run\ndocker build --tag demo_pandas_app.py . before you run\ndocker run demo_pandas_app MySQL and Docker\r#\rGet MySQL Docker image\r#\rdocker pull mysql\rStart a mysql server instance\r#\rdocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\rwhere some-mysql is the name you want to assign to your container, my-secret-pw is the password to be set for the MySQL root user and tag is the tag specifying the MySQL version you want.\nIt could be\ndocker run -p 3308:3306 --name my-mysql -e MYSQL_ROOT_PASSWORD=Kea1234#! -d mysql:latest\rThe -p 3308:3306 is the definition of the port the MySQL server are using Password: Kea1234#! Standard port number for MySQL is 3306, but this number are you using for the local MySQL server you have on the computer. You have to get a new port number.\nThe port number definition is:\nlocalhost:container\n3308:3306\ndocker exec -it my-mysql mysql -uroot -p\nDocker Desktop\r#\rAccess to MySQL Server\r#\rNow yo need to access the MySQL Server.\nFrom an terminal\r#\rFrom a terminal you can use:\ndocker exec -it my-mysql mysql -uroot -p\rfor access to the server. Use the password you created.\nFrom MySQL Workbench\r#\rFrom MySQL Workbench you have to use:\nHostname: localhost Port: 3308 Username: root\nLink\r#\rYou can finde more information about this Docker file at https://hub.docker.com/_/mysql Git repo of the Docker \u0026ldquo;Official Image\u0026rdquo; for mysql github.com/docker-library/mysql "},{"id":6,"href":"/4.-Semester/04-docker/dockercompose/","title":"Dockercompose","section":"04 Docker","content":"\rDocker Compose\r#\rDocker is used to manage an individual container for your application.\nDocker-Compose is used to manage several containers at the same time for the same application. This tool offers the same features as Docker but allows you to have more complex applications.\n"},{"id":7,"href":"/4.-Semester/04-docker/dockertroubleshooting/","title":"Dockertroubleshooting","section":"04 Docker","content":"\rDocker Troubleshooting\r#\rHardware assisted virtualization and data execution protection must be enabled in the BIOS\r#\rIf you get this error message starting Docker Desktop, it indicates that there is a problem with Hyper-V.\nThe problem with Hyper-V that is disabled or Hypervisor agent not running.\nIf Hyper-V is totally disabled or not installed\r#\rYou can try 2 differst ways\n#\rGo to Control Panel -\u0026gt; [Programs] -\u0026gt; [Windows Features] Check Windows Hypervisor-platform Restart the system PowerShell\r#\rOpen PowerShell as administrator and\nEnable Hyper-V with\ndism.exe /Online /Enable-Feature:HypervisorPlatform /All\nIf Hyper-V feature is already enabled but doesn\u0026rsquo;t work\r#\rEnable Hypervisor with\nbcdedit /set hypervisorlaunchtype auto\nNow restart the system and try again.\n"},{"id":8,"href":"/Om/tuehellstern/","title":"Tue hellstern","section":"Om","content":"\rTue Hellstern\r#\rAnsat på Kea i 2019 som underviser på Datamatiker uddannelsen.\nI 2020 skifter jeg til Økonomi og IT\nJeg underviser primært på:\n4 semester Valgfag Erfaring\r#\rJeg har siden 1995 arbejdet som selvstændig IT-konsulent med fokus på:\nProgrammering af løsninger for virksomheder Data og databaser Project ledelse, både Agil og mere traditionel Undervisning af specielt virksomheder Undervisning\r#\rUd over Kea underviser jeg også på DTU i Ballerup. Desuden laver jeg en del korte kurser for fagforeningen IDA.\n"},{"id":9,"href":"/4.-Semester/04-docker/DockerDesktop/","title":"Docker Desktop","section":"04 Docker","content":"\rDocker Desktop\r#\r"},{"id":10,"href":"/5.-Semester/Know-Your-Data/etl/automate-excel/","title":"Automate Excel","section":"Etl","content":"\rAutomate data processing\r#\rIn Excel using Python, Pandas, and Openpyxl\r#\rFiles\r#\rExcel\nsales_data.xlsx sales_data.xlsx Jupyter Lab\nReal_world_example.ipynb demo.ipynb openpyxl-chart-notebook.ipynb openpyxl-tutorial.ipynb Introduction\r#\rThis is all about automating Microsoft Excel using python and two different libraries.\nThe first library is Pandas. This library is used to process dataframes at high speed. Pandas is used all over the world of data analysis, data science, and data engineering. A basic workflow is Pandas is to load and excel file into a dataframe, apply all sorts of complex processing wit few lines of code, then save the results into Excel.\nThe second library we will be using is Openpyxl. This library provides a more familiar automation of excel. Meaning it all us to replicate the exact steps we would use manually in excel using few lines of python code, and with that, automating those steps. Openpyxl provides all sorts of supported excel options, from charts, to formulas, to styling…etc.\nWORKING WITH PANDAS\r#\rIntroduction\r#\rWe live in the age of automation where more and more tasks are getting automated by algorithms, so that we can focus more on our core work and not waste valuable time on second degree tasks.\nIn this beginner’s friendly post, we will explore how to automate certain Excel tasks related to data processing using the Python programming language and the famous Pandas library.\nThis article is a tutorial-based walkthrough where we explain concepts and share code snippets of each step of the process to facilitate for beginners to grasp concepts better.\nWhy Automating Excel\r#\rLike we mentioned in the introduction, automation is everywhere and Excel is one of the places where it’s visible in corporations and enterprises. A good example would be that a Data Analyst would do more analyzing work if he/she can automate some tasks and not waste working hours on them.\nAnother good reason is that Excel is very popular and used everywhere, meaning that learning how to automate its workflows is a great investment for you and for the company you are working for.\nWhy using Python\r#\rAt this point of time in the world of programming, the real question is, why not use Python?\nPython is extremely popular nowadays and it’s used in almost every computer science branch.\nThe popularity of Python is due to many factors like the ease of use, the numerous open-source packages it has, and the ever-growing community that is supporting it.\nOne of the domains where Python really shines is Automation, and in this article, we will demonstrate how we can use it to automate Excel data processing.\nWhy using Pandas\r#\rPandas is one of the most used python libraries, especially in the world of data science, data analysis, data engineering, and machine learning. It uses the concepts of dataframes where it reads and then loads data in memory in the format of tabular data. Meaning rows and columns, similar to a database table.\nDataframes allow us to handle data easily as well as apply complex processing to the data with few lines of code.\nYou can think of a Pandas’ dataframe like an Excel spreadsheet on steroids. They may look the same, but a dataframe is more powerful.\nInstalling Python\r#\rIf you have a new computer or something is gone wrong with Python.\nTo install python, head out to the official website www.python.org/downloads and download the specific version for your computer, then install it like any other software.\nInstalling Pandas\r#\rOnce python is installed in your machine, we use the pip command to install Python packages.\nTo install Pandas, open the terminal or the command prompt, and type the following:\npip install pandas\rthen hit enter.\nBest way to apply the automation\r#\rThe best way to apply Excel automation is if we have some kind of a report that we always make using some fixed-structure data. If the structure of data does not change, which is the case for reports, we simply automate the steps we usually do in Excel (loading the data, calculation, aggregations, deleting certain rows, … finally, saving the file).\nGetting Started\r#\rNow that we have Python and Pandas installed on our local machine, we can start the work.\nFor this example, we will use the Jupyter Notebook as our text editor. Of course, you can choose any other text editor like VSCode.\nThe first thing when using the Pandas library with python, is to import it using the following code:\nimport pandas as pd Reading Excel and CSV files using pandas\nThe data that we will be working with is this:\nThe first step is always to read the file where the data is located, so that we can extract it, process it, and then save it in an Excel friendly format.\nIn this example we read data from either an Excel (xlsx) or CSV file. Since those are the two most used formats in Excel.\nTo read data from CSV we use the read_csv method and give it the path of our csv file as follows:\ndf = pd.read_csv(path) To read data from Excel we use the read_excel method and give it the path of our csv file as follows:\ndf = pd.read_excel(path) To visualize our dataframe we can print it out using print(df). That way we can have an idea about our data, and to confirm that we had no errors when we imported the data.\nOr use print(df.head()) to print the first 5 records (rows) of the dataframe.\nWorking with columns in pandas\r#\rPandas gives us the possibility to apply all sorts of operations on columns same as Excel does. From slicing, to copying, to applying mathematical calculations, to creating new columns, we can automate it all using Python and Pandas.\nHere are some examples to help you get started:\nTo get the name of the columns from a pandas dataframe:\nlist(df.columns) To get how many rows and columns we have:\ndf.shape We can see that we have 11 rows and 5 columns\nTo get the values of a single column from the data we use the following code:\ncolumn = df[\u0026#39;column name\u0026#39;] That’s possible since we can get separate columns as follows:\nTo create a dataframe out of the previous one or just assign a column to another one in pandas we use the following syntax\ndf[\u0026#39;column 2\u0026#39;] = df[\u0026#39;column 1\u0026#39;] Basically, in the above example we created a new column named \u0026ldquo;column 2\u0026rdquo; which is a copy of the previously existing \u0026ldquo;column 1\u0026rdquo;.\nCreating a dataframe from two previous columns:\ndf2 = df[[\u0026#39;Client Name\u0026#39; ,\u0026#39;Item\u0026#39;]] To delete a column, we use the following syntax:\ndf.drop(\u0026#39;column_name\u0026#39;, axis=1, inplace=True) Note that axis=1 refers to the columns, and axis=0 refers to the rows. We set inplace=True so that we don’t need to assign the dataframe, meaning the changes will saved directly.\nWorking with rows in pandas\r#\rSame as with columns, we have a lot of functions in Pandas that allow us to apply all sorts of handling and calculations directly to the rows of our dataframe.\nTo retrieve a row in Pandas we use the loc method:\nFirst_row = df.loc[\u0026#39;row_cell_value\u0026#39;] Notice how the row gets printed in Jupyter. That’s one of the advantages of using it.\nSame as with columns, to delete a row in pandas we use the drop method. The only difference is that we set axis=0:\ndf.drop(7, axis=0, inplace=True) In the above example we deleted row 7 and you can notice that if you check rows’ indexes on the far left, we have all values from 0 to 10, except for 7.\nWe can also delete multiple rows at by passing the indexes of the rows we wish to delete as a list:\ndf.drop([2,3,6], axis=0, inplace=True) In the above example we deleted rows 2, 3, and 6. You can verify that that’s true by checking the index column. We have all indexes from 0 to 10 except for 2, 3, and 6.\nWe can concatenate two dataframes together using Pandas. The equivalent of that would be concatenating two tables or even two spreadsheets in Excel.\nTo concatenate let’s say df1 and df2 into df3, we use the following code:\ndf3 = pd.concat([df1, df2]).reset_index(drop = True) Data aggregation – Aggregate Functions\r#\rWhat is an aggregate function? Same as in Excel or SQL, aggregate functions perform a mathematical calculation on a set of values (grouped data) and return a one single value. Basically, when aggregating rows, we get a summary of that row.\nHere are some aggregate functions that are supported by Pandas:\nFunction Description count() Returns count for each group size() Returns size for each group sum() Returns total sum for each group mean() Returns mean for each group. Same as average() average() Returns average for each group. Same as mean() std() Returns standard deviation for each group var() Return var for each group sem() Standard error of the mean of groups describe() Returns different statistics To use an aggregate function in Pandas, we always call the aggregate method, then pass one of the supported functions as a value.\nFor example, to calculate the sum of the \u0026ldquo;Full Price\u0026rdquo;, and \u0026ldquo;Discount\u0026rdquo; values, we use the following code:\nresults = df[[\u0026#39;Full Price\u0026#39;, \u0026#39;Discount\u0026#39;]].aggregate(\u0026#39;sum\u0026#39;) Let’s check a more complex example. To calculate the sum of the \u0026ldquo;Full Price\u0026rdquo; column, as well as the min and max of the Discount\u0026quot; column, we use the following:\nresults = df.aggregate({\u0026#39;Full Price\u0026#39;:\u0026#39;sum\u0026#39;,\u0026#39;Discount\u0026#39;:[\u0026#39;min\u0026#39;, \u0026#39;max\u0026#39;]}) As we can see from the results, The sum of the \u0026ldquo;Full Price is 6.950, the min and max of the Discount\u0026rdquo; are 0, 150 accordingly.\nReal world example\r#\rIn this section we will work on a real-world project to visualize the benefits of automating Excel workflows.\nWe will use the previously imported data where we have 5 columns which are Client Name, Item, Location, Full Price, and Discount.\nLet’s say our workflow contains the following steps:\nCalculate the Percentages of discounts in a new Column Calculate the Final Price after applying the discount in a new column Delete all rows where Discount is equal to 0 Save the results in a new file under the name final-results.xlsx We first Import pandas:\nimport pandas as pd Then we read the file:\ndf = pd.read_excel(\u0026#39;sales_data.xlsx\u0026#39;) We usually print the dataframe to check that everything is okay:\nCalculating the percentages:\ndf[\u0026#39;Discount Percentage\u0026#39;] = (df[\u0026#39;Discount\u0026#39;] / df[\u0026#39;Full Price\u0026#39;]) * 100 df[\u0026#39;Discount Percentage\u0026#39;]= df[\u0026#39;Discount Percentage\u0026#39;].map(\u0026#39;{:,.2f}\u0026#39;.format) ```python ![](./image/discount_1.jpg) **Calculating the final price:** ```python df[\u0026#39;Final Price\u0026#39;] = df[\u0026#39;Full Price\u0026#39;] - df[\u0026#39;Discount\u0026#39;] Deleting Rows where Discount is equal to 0:\ndf = df[df[\u0026#39;Discount\u0026#39;] \u0026gt; 0] Saving the file:\ndf.to_excel(\u0026#39;final-results.xlsx\u0026#39;, index=False) To save a dataframe to an Excel in pandas we use the to_excel function, and we pass it the name of the file. Note that the name of the file has to end with .xlsx which is the extension of an Excel workbook.\nWe set index=False, to tell Pandas to not save the index column which is what we usually want since that column is generated by Pandas.\nResulted Excel File:\nAs you can see on the resulted final-results.xlsx Excel workbook, we have got exactly what we needed without opening Excel at all. We automated the whole process using Python and the Pandas library.\nNow we can take the script and apply it to all our similar structured reports!\nConclusion\r#\rPython and Pandas are a great combination to automate Excel workflows because they are easy to understand and use.\nPandas dataframes are more powerful than Excel spreadsheets. In this article, we only scratched the surface on what this library can do to get beginners started.\nDeep dive into Python, Pandas and other libraries to open the full potential of automation!\nWORKING WITH OPENPYXL\r#\rIntroduction on openpyxl\r#\rOpenpyxl is an open-source python library used to read and write data from Excel 2010+ xlsx/xlsm files. The library is power and allows us to automate excel file at the cell level. We basically can achieve anything we can manually do in excel using this library and lines of Python code.\nGetting started\r#\rTo get started we need to install the openpyxl library by going to the terminal or command prompt and type the following code:\npip install openpyxl Working with workbooks\r#\rNow that we have the library installed, we can either use it to load and existing Excel workbook or create an empty one first:\nLoad existing workbook\r#\rTo load an existing excel file we import the load_workbook class, instantiate it by passing the path of the xlsx file as follows:\nfrom openpyxl import load_workbook wb = load_workbook(\u0026#39;sales_data.xlsx\u0026#39;) Create new workbook\r#\rTo create a new Excel workbook we call the Workbook class from the openpyxl library, and instantiate it.\nThe created workbook will be completely empty and only have one worksheet names Sheet by default.\nNote that we don’t give a file name right away, but in the end when saving the file.\nfrom openpyxl import Workbook wb = Workbook() Save a workbook\r#\rTo save a workbook we use the save method which takes the file name as input. Note that the file name is a string that must end with .xlsx\nKeep in mind that if you save a file under the same name as another file that is located in the same directory, the original file will get overwritten by the new one.\nOne more thing to keep in mind is that you MUST CLOSE THE FILE IN EXCEL before saving it., otherwise you will get an error and the file won’t be saved.\nwb.save(\u0026#39;ExcelFileName.xlsx\u0026#39;) Working with worksheets\r#\rWe can get all worksheets present in an Excel workbook. We need to get specific sheets in order to either get data from them or assign data to them.\nGet active sheet\nTo get the active sheet we use the following code:\nws = wb.active **Get sheet by name **\nTo get any sheet by its name we use the following:\nws = wb[\u0026#39;Sheet1\u0026#39;] Get all sheets name\nIn order to get all the names of the sheets that are present in an excel workbook, we use the following:\nwb.sheetnames Create new sheet\nWe can also create new sheets using the create_sheet method on the workbook which takes the sheet name as argument:\nwb.create_sheet(\u0026#39;NewSheet\u0026#39;) Get and set sheet title\nWe can get and set current selected sheet titles.\nTo get sheet title\nws.title to set sheet title\nws.title = \u0026#39;Sheet2\u0026#39; Working with Cells, Rows, Columns, and Ranges\r#\rGetting and setting cells values\nUsing openpyxl, we can go as deep as getting and setting data as the cells level, which is the same level of control we have on excel. Not only getting and setting data, but also, we van add style, Formulas, and Charts.\nTo get the value of a specific cell, we use the following syntax:\nws[\u0026#39;B4\u0026#39;].value In the above example we use cell B4, but we can use any cell.\nTo set the value of a certain cell, we use the following code:\nws[\u0026#39;B4\u0026#39;] = \u0026#39;Cup\u0026#39; ws[\u0026#39;B4\u0026#39;].value In the above example we set the string Cup to cell B4.\nHowever, setting cells values individually isn’t the best way. We can add entire rows of data at once using the append method, and passing cell values as a list.\nAppending entire rows of data at once\nws.append([\u0026#39;test1\u0026#39;, \u0026#39;test2\u0026#39;, \u0026#39;test3\u0026#39;, \u0026#39;test4\u0026#39;]) ```python Here’s an example that illustrates what happens when we add entire rows at once: ```python # Append multiple rows ws = wb.active ws.append([\u0026#39;test1\u0026#39;, \u0026#39;test2\u0026#39;, \u0026#39;test3\u0026#39;, \u0026#39;test4\u0026#39;]) ws.append([\u0026#39;test5\u0026#39;, \u0026#39;test6\u0026#39;, \u0026#39;test3\u0026#39;, ]) ws.append([\u0026#39;\u0026#39;, \u0026#39;test7\u0026#39;, \u0026#39;test8\u0026#39;]) ws.append([\u0026#39;test9\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;test10\u0026#39;]) ws.append([\u0026#39;test11\u0026#39;, \u0026#39;test12\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;test13\u0026#39;]) wb.save(\u0026#39;test-file.xlsx\u0026#39;) Note that if we pass empty value in the list, we will get empty cells.\nHere’s the resulted file:\nMerging and unmerging a range of cells\r#\rTo merge ranges using this library, same as we do in Excel, we use the merge_cells method which takes a range as input:\nws.merge_cells(\u0026#39;A1:D3\u0026#39;) Note that we can lose that if the cells are not empty before merging them.\nTo unmerge cells that have been merged before, we use the unmerge method and we pass it the desired range:\nws.unmerge_cells(\u0026#39;A1:D3\u0026#39;) Inserting empty rows\r#\rTo insert an entire empty row, we use the insert_rows method, and we pass it the position:\nws.insert_rows(3) Deleting an entire row\r#\rTo delete rows, empty or not, we use the delete_rows method which takes the row’s position as input:\nws.delete_rows(3) Inserting an empty column\r#\rTo insert columns, we use the insert_cols method which takes the column’s position as input:\nws.insert_cols(2) Deleting an entire column\r#\rTo delete columns, empty or not, we use the delete_cols method which takes the column’s position as input:\nws.delete_cols(2) In the coming example we will add 4 filled columns and 5 filled rows, then add an empty column at position 2 and one empty row at position 3:\nws = wb.active ws.append([1, 2, 3, 4]) ws.append([5, 6, 7, 8]) ws.append([9, 10, 11, 12]) ws.append([13, 14, 15, 16]) ws.append([17, 18, 19, 20]) ws.insert_rows(3) ws.insert_cols(2) wb.save(\u0026#39;test-file2.xlsx\u0026#39;) Here’s the resulted file:\nMoving an entire range of cells\nTo move an entire range of cells, we use the move_range method which takes the range as input, as we as by how many rows and columns the range should move:\nws.move_range(\u0026#39;A2:D8\u0026#39;, rows=3, cols=3) Here’s an example to better illustrate the move_range:\nws = wb.active ws.append([1, 2, 3, 4]) ws.append([5, 6, 7, 8]) ws.append([9, 10, 11, 12]) ws.append([13, 14, 15, 16]) ws.append([17, 18, 19, 20]) ws.move_range(\u0026#39;A1:D5\u0026#39;, rows=3, cols=3) wb.save(\u0026#39;test-file3.xlsx\u0026#39;) Here’s the resulted excel file:\nUse Excel supported formulas\r#\rWe reference the cell and pass in the desired formula as a string. One of the advantages of the openpyxl library is that the formula appears on the Excel file, same as when we define it manually on the excel worksheet.\nws[\u0026#39;cell\u0026#39;] = \u0026#39;formula\u0026#39; ```python Here’s an example of using the SUM formula to calculate the total sum of the prices ```python wb = Workbook() ws = wb.active rows = [ [\u0026#39;Id\u0026#39;, \u0026#39;Quantity\u0026#39;, \u0026#39;Price\u0026#39;, \u0026#39;Solde\u0026#39;], [\u0026#39;id-001\u0026#39;, 27, 129.99, 24], [\u0026#39;id-002\u0026#39;, 144, 24.99, 30], [\u0026#39;id-003\u0026#39;, 57, 35.99, 45], [\u0026#39;id-004\u0026#39;, 67, 15.99, 40], [\u0026#39;id-005\u0026#39;, 44, 30.99, 30], [\u0026#39;id-006\u0026#39;, 17, 25.99, 35], ] for row in rows: ws.append(row) ws[\u0026#39;C9\u0026#39;] = \u0026#39;=SUM(C2:C7)\u0026#39; wb.save(\u0026#39;SUM-formula-file.xlsx\u0026#39;) Results\nAs you can see, we have SUM of the prices on cell C9, and when clicking on the cell, we see that the formula appears on the fx field above, same as when we enter the function manually.\nWorking with Charts\r#\rWe can create all sorts of excel supported chart using openpyxl easily. The process will always be the same for all types of charts.\nWe import the specific chart class desired as well as the Reference class from the openpyxl We instantiate the Reference object by passing the data as a range We instantiate the chart object We pass the referenced data to the chart We set the title, axis names, legends and any other info We add colors if desired to We assign the chart to a sheet at a certain start position Available charts\r#\rWe can check all available charts that the library provides on the official documentation at this link: https://openpyxl.readthedocs.io/en/stable/charts/introduction.html\nThe documentation also provides code snippets and examples.\nFor our tutorial we will see how to make a beginner friendly Line Chart\r#\rFirst, we import the Workbook class to create a new workbook, the LineChart to create a line chart, The Reference class to get and pass the required data to the chart, and finally the date class since we will be using some dates in the data.\nWe instantiate a new workbook, and get the active worksheet.\nSecondly, we define the data as a list of lists, and named the variable rows. This makes easy to iterate over it as well as modify it later. We then loop over the rows and append them to the Excel sheet using the append method.\nfrom openpyxl import Workbook from openpyxl.chart import LineChart, Reference from datetime import date wb = Workbook() ws = wb.active # Add data to active sheet rows = [ [\u0026#39;Date\u0026#39;, \u0026#39;Batch 1\u0026#39;, \u0026#39;Batch 2\u0026#39;, \u0026#39;Batch 3\u0026#39;], [date(2015,9, 1), 40, 30, 25], [date(2015,9, 2), 40, 25, 30], [date(2015,9, 3), 50, 30, 45], [date(2015,9, 4), 30, 25, 40], [date(2015,9, 5), 25, 35, 30], [date(2015,9, 6), 20, 40, 35], ] for row in rows: ws.append(row) Thirdly, we instantiate the LineChart object, then setup up some properties like the title, the style, and the axis titles of the Chart.\n# Setup the Chart c1 = LineChart() c1.title = \u0026#34;Line Chart\u0026#34; c1.style = 13 c1.y_axis.title = \u0026#39;Size\u0026#39; c1.x_axis.title = \u0026#39;Test Number\u0026#39; Note that we have different styles that we can call by given a number, in this example we choose style 13. Check out the rest of styles on the official documentation.\nForth, we instantiate the Reference object, and pass the sheet and the range of the data on the sheet. Our data range is A1:D6, if the we take the first column it will become B1:D7. Meaning from column 2 to column 4, and from row 1 to row 7\nWe the pass the Referenced data to the chart object using the add_data method. Note that we set titles_from_data to true since we referenced the header with the data (row 1)\ndata = Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7) c1.add_data(data, titles_from_data=True) Now we style our lines. In this examples data we have 3 columns (Batch 1, Batch2, and Batch3) that we want to visualize as time goes on.\nWe use series to get each column of data (line). series[0] is for line 1, series[1] is for line 2, and series[2] is for line 3.\nAfter getting each line we can set the color, the symbols, the with and so on, same as using excel. To see the full list of the properties, check out the official documentation of openpyxl.\n# Style Line 1 s1 = c1.series[0] s1.marker.symbol = \u0026#34;triangle\u0026#34; s1.marker.graphicalProperties.solidFill = \u0026#34;FF0000\u0026#34; # Marker filling s1.marker.graphicalProperties.line.solidFill = \u0026#34;FF0000\u0026#34; # Marker outline s1.graphicalProperties.line.noFill = True # Style Line 2 s2 = c1.series[1] s2.graphicalProperties.line.solidFill = \u0026#34;00AAAA\u0026#34; s2.graphicalProperties.line.dashStyle = \u0026#34;sysDot\u0026#34; s2.graphicalProperties.line.width = 100050 # width in EMUs # Style line 3 s3 = c1.series[2] s3.smooth = True # Make the line smooth We then add the chart to desired sheet at a specific cell. In our example we added the chart to the active sheet at cell F1.\n# Add chart to sheet ws.add_chart(c1, \u0026#34;F1\u0026#34;) We finally save the workbook.\n# Save Workbook wb.save(\u0026#39;chart-file.xlsx\u0026#39;) Here’s the resulted file. From the left we can see the data we added, and on the right, starting from cell F1 we can see our Chart.\nUsing Lookups in openpyxl\r#\rExample\nLookup using both pure python as well as using a formula\r#\rfrom openpyxl import Workbook wb = Workbook() ws = wb.active rows = [ [\u0026#39;Id\u0026#39;, \u0026#39;Quantity\u0026#39;, \u0026#39;Price\u0026#39;, \u0026#39;Solde\u0026#39;], [\u0026#39;id-001\u0026#39;, 27, 129.99, 24], [\u0026#39;id-002\u0026#39;, 144, 24.99, 30], [\u0026#39;id-003\u0026#39;, 57, 35.99, 45], [\u0026#39;id-004\u0026#39;, 67, 15.99, 40], [\u0026#39;id-005\u0026#39;, 44, 30.99, 30], [\u0026#39;id-006\u0026#39;, 17, 25.99, 35], ] for row in rows: ws.append(row) ```python ws[\u0026#39;F1\u0026#39;].value = \u0026#39;Id\u0026#39; ws[\u0026#39;G1\u0026#39;].value = \u0026#39;Price\u0026#39; ws[\u0026#39;F2\u0026#39;].value = \u0026#39;id-004\u0026#39; for row in ws.rows: if row[0].value == ws[\u0026#39;F2\u0026#39;].value: ws[\u0026#39;G2\u0026#39;] = row[2].value ws[\u0026#39;G4\u0026#39;] = \u0026#39;=LOOKUP(F2, A1:A7,C1:C7)\u0026#39; wb.save(\u0026#39;lookup-file.xlsx\u0026#39;) Results\nConclusion\r#\rOpenpyxl provides powerful methods to automate excel at the cell level. We basically have the full control of any workbook either create or load. This library is very extensive, and have a lot of details to it, that’s why one should always refer back to the documentation.\n"},{"id":11,"href":"/5.-Semester/Know-Your-Data/etl/excel-powerbi-etl/","title":"Excel Powerbi Etl","section":"Etl","content":"Home\nExcel and ETL\r#\rExcel and Power BI has a powerful data analysis pack named Get and Transform (previously known as Power Query).\nIt is an ETL pack for cleaning and sorting raw data from a range of input sources, such as CSV and text files.\nIn this age of data lakes and petabyte-scale databases, it is shocking how frequently you still receive data in the form of CSV, text, and Excel files.\nThe day-to-day drudgery of data analysis is still a manual process of finding, compiling, and wrangling disparate data types.\n"},{"id":12,"href":"/5.-Semester/Know-Your-Data/etl/slides/ETL-slide/","title":"ETL","section":"Etl","content":" ETL #\rExtract - Transform - Load #\rData sources #\rCan you name some data sources? #\rWhy ETL?\r#\rAnalyze business data for taking critical business decisions Transactional databases cannot answer complex business questions Provides a method of moving the data from various sources into a data warehouse Allow verification of data transformation, aggregation and calculations rules ETL process can perform complex transformations ETL helps to Migrate data into a Data Warehouse Tools #\rCan you name some ETL tools? #\rTools\r#\rExcel (Windows version) Get and transform Power Query Editor (DAX) VBA Office Script Python MySQL Microsoft Power Platform Power BI (Desktop) Power Apps Power Automate Power Virtual Agents "}]